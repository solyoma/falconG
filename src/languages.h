#pragma once

#include <QMainWindow>
#include <QString>
#include <QStringList>

#if !defined(ID_T_DEFINED)
using ID_t = int64_t;
#endif

const QString sFalcongEnglishCopyright = QString(QMainWindow::tr("Site generated by\n<strong>falconG</strong> - © A.Sólyom 2018-2021"));

//*****************************************
class LangConstList : public QStringList
{
	int _index;
	QString _def;		// what is this?
public:	
	LangConstList(int index, QString definition, int size = 0) : QStringList(), _index(index), _def(definition) { Prepare(size); }

	int Index() const { return _index; }
	QString Definition() const { return _def; }
	void Prepare(int languageCount) { clear();  for (int i = 0; i < languageCount; ++i) push_back(""); }
	void Clear() { for (int i = 0; i < size(); ++i) (*this)[i].clear(); }
	bool IsEmpty() {for (int i = 0; i < size(); ++i) if (!(*this)[i].isEmpty()) return false; return true;}
	void Fill(QString s) { for (int i = 0; i < size(); ++i) (*this)[i] = s; }

    LangConstList &operator=(const LangConstList & txt) { QStringList::operator=(dynamic_cast<const QStringList &>(txt)); return *this;}
    LangConstList &operator=(const QStringList &sl) { QStringList::operator=(sl);  return *this;}
};
//*****************************************

using LanguageMap = QMap<QString, LangConstList*>;

struct Languages : public LanguageMap	// each language has a text file named <text from 'languages'>.php
{					// or the languages are set in a .struct file
		// these are read from language definition files '<xxx>.lang in program directory

	Languages()
	{
		insert("abbrev", new LangConstList(0, QMainWindow::tr("Suffix, used in file names. e.g. \"_us\" for \"en_US\"")));
		insert("albums", new LangConstList(1, QMainWindow::tr("Title of album section in HTML files")));
		insert("countOfImages", new LangConstList(2, QMainWindow::tr("Text for image and album count display in footer. %1 and %2 are placeholders for image and album count respectively")));
		insert("countryCode", new LangConstList(3, QMainWindow::tr("Country code. Examples: \"en_US\", \"hu_HU\", etc")));
		insert("coupleCaptions", new LangConstList(4, QMainWindow::tr("Whether to hide image titles together with captions")));
		insert("falconG", new LangConstList(5, QMainWindow::tr("Program Copyright Message. Do not change it please!")));
		insert("icon", new LangConstList(6, QMainWindow::tr("Name of icon to use instead of names")));
		insert("images", new LangConstList(7, QMainWindow::tr("Title for image section in HTML files")));
		insert("language", new LangConstList(8, QMainWindow::tr("Two letter abbreviation for languages in HTML files, like 'lang=en'")));
		insert("latestDesc", new LangConstList(9, QMainWindow::tr("Caption of 'Latest Uploads' album'")));
		insert("latestTitle", new LangConstList(10, QMainWindow::tr("Title of Latest Uploads album")));
		insert("name", new LangConstList(11, QMainWindow::tr("Text for language switch on page head. Example \"English\"")));
		insert("share", new LangConstList(12, QMainWindow::tr("Text of facebook share button")));
		insert("showDescriptions", new LangConstList(13, QMainWindow::tr("Text of image and album caption display toggle menu")));
		insert("toAboutPage", new LangConstList(14, QMainWindow::tr("Text of 'About' menu")));
		insert("toAlbums", new LangConstList(15, QMainWindow::tr("text of 'Jump to Album Section' menu")));
		insert("toContact", new LangConstList(16, QMainWindow::tr("Text of 'Contact' menu. Example: \"Email me\"")));
		insert("toHomePage", new LangConstList(17, QMainWindow::tr("Text for 'To Home' menu")));
		insert("toTop", new LangConstList(18, QMainWindow::tr("Text of menu Jump Top of Page")));
		insert("upOneLevel", new LangConstList(19, QMainWindow::tr("Text for 'Level up' menu")));
		insert("videos", new LangConstList(20, QMainWindow::tr("Title of video section in HTML files")));
	}													
	~Languages()
	{
		for (auto it = begin(); it != end(); ++it)
			delete it.value();
	}

	int _Read(QString name);		// defult: single language, name: "English" countryCode: "en_US", no icon
	int Read();					// reads all language files from program directory
	void Clear(int newSize = 0);
	int LanguageCount() 
	{ 
		return first()->size(); 
	}
	void SetTextFor(QString name, QString val, int lang);

	QString FileNameForLanguage(QString name, int language);	// adds _<abbrev> to base name if more than one languages
};

//------------------------------------------
class TextMap;			// in albums.h, used in text for ID calculation

/*============================================================================
* LanguageTexts and TextMap
*	- LanguageTexts objects contains the concatenated texts for all languages
*	- Texts are represented by their ID, which may not be 0
*	- text IDs are calculated using all language texts. This is the base ID
*	- two or more texts may have the same base ID but different QStrings in
*		them (text ID collision)
*	  in which case the ID of the new text (the one that was added later on)
*		is modified using the 'collision' member, which is
*			1 + the number of the other texts with the same base ID
*	- the usage count of each text is the number of Albums and Images that
*		use it. If 'usageCount' is 0 thex is not used anywhere
*	- More than one Album or Image can use the same text, or more accurately the
*	  same text ID
*
*----------------------------------------------------------------------------*/

struct LanguageTexts				// both Album and Image uses this
{
	ID_t ID = 0;		// same for all translations of this in all languages (0: invalid)
	int collision = -1;	// (-1: not set) set when this text collided with an other one: ID = base id + (collision << ID_COLLISION_FACTOR)
	QVector<int> lenghts;	// set to have as many elements as there are languages, lang ID is index in text
	QString textsForAllLanguages; //concatenated language texts
	UsageCount usageCount; // how many times this same text is added to list

	LanguageTexts(int languageCount = 0) { Clear(languageCount); }
	LanguageTexts(const QStringList& texts);
	LanguageTexts(const LanguageTexts& t) : ID(t.ID), collision(t.collision), lenghts(t.lenghts), textsForAllLanguages(t.textsForAllLanguages), usageCount(t.usageCount) {}

	LanguageTexts& operator=(const LanguageTexts& t);
	LanguageTexts& operator=(const QStringList& txts);
	bool operator==(const LanguageTexts& t);		// compare first ID then all texts
	bool operator!=(const LanguageTexts& t);		// compare first ID then lang (unless lang < 0, when only ID is used)
	int operator<(const LanguageTexts& t);

	const QString operator[](int index) const			   // ***  can't change text using this! Use SetText() instead
	{
		static QString dummy;
		if (textsForAllLanguages.isEmpty())
			return dummy;
		if (index == 0)
			return textsForAllLanguages.left(lenghts[0]);
		return (index > 0 && index < lenghts.size()) ? textsForAllLanguages.mid(lenghts[index - 1], lenghts[index]) : dummy;
	}
	void SetTextForLanguageNoID(const QString str, int lang);		 // just set

	bool Valid() const { return ID > 0; }
	ID_t CalcBaseID();			// changes 'ID' but does not change 'collision'
	ID_t CalcID(TextMap& map);	// changes 'ID' and 'collision' unless already OK (read in)

	void Clear(int newSize = 0);  // 0: does not change size of 'lenghts'
	bool IsEmpty() { return textsForAllLanguages.isEmpty(); }
};

extern Languages languages;